class RecentlyPlayedStore {
  constructor(capacity) {
    this.capacity = capacity;
    this.store = new Map();
  }

  addSong(user, song) {
    if (!this.store.has(user)) {
      this.store.set(user, []);
    }

    const playlist = this.store.get(user);

    if (playlist.includes(song)) {
      const index = playlist.indexOf(song);
      playlist.splice(index, 1);
    } else if (playlist.length >= this.capacity) {
      playlist.shift();
    }

    playlist.push(song);
  }

  getRecentlyPlayedSongs(user) {
    if (this.store.has(user)) {
      return this.store.get(user);
    }

    return [];
  }
}

module.exports = RecentlyPlayedStore;
RecentlyPlayedStore.test.js:
javascript
Copy code
const RecentlyPlayedStore = require("../src/RecentlyPlayedStore");

describe("RecentlyPlayedStore", () => {
  let store;

  beforeEach(() => {
    store = new RecentlyPlayedStore(3);
  });

  it("should return recently played songs for a user", () => {
    store.addSong("User1", "S1");
    store.addSong("User1", "S2");
    store.addSong("User1", "S3");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S1", "S2", "S3"]);

    store.addSong("User1", "S4");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S2", "S3", "S4"]);

    store.addSong("User1", "S2");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S3", "S4", "S2"]);

    store.addSong("User1", "S1");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S4", "S2", "S1"]);
  });

  it("should return an empty array for a user with no recently played songs", () => {
    expect(store.getRecentlyPlayedSongs("User2")).toEqual([]);
  });
});

const RecentlyPlayedStore = require("../src/RecentlyPlayedStore");

describe("RecentlyPlayedStore", () => {
  let store;

  beforeEach(() => {
    store = new RecentlyPlayedStore(3);
  });

  it("should return recently played songs for a user", () => {
    store.addSong("User1", "S1");
    store.addSong("User1", "S2");
    store.addSong("User1", "S3");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S1", "S2", "S3"]);

    store.addSong("User1", "S4");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S2", "S3", "S4"]);

    store.addSong("User1", "S2");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S3", "S4", "S2"]);

    store.addSong("User1", "S1");
    expect(store.getRecentlyPlayedSongs("User1")).toEqual(["S4", "S2", "S1"]);
  });

  it("should return an empty array for a user with no recently played songs", () => {
    expect(store.getRecentlyPlayedSongs("User2")).toEqual([]);
  });
});







